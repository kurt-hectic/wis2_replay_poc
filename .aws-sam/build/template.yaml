Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/Resource
  VpcpublicSubnet1Subnet2BB74ED7:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: aws-cdk:subnet-name
        Value: public
      - Key: aws-cdk:subnet-type
        Value: Public
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/publicSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet1/Subnet
  VpcpublicSubnet1RouteTable15C15F8E:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/publicSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet1/RouteTable
  VpcpublicSubnet1RouteTableAssociation4E83B6E4:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcpublicSubnet1RouteTable15C15F8E
      SubnetId:
        Ref: VpcpublicSubnet1Subnet2BB74ED7
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet1/RouteTableAssociation
  VpcpublicSubnet1DefaultRouteB88F9E93:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcpublicSubnet1RouteTable15C15F8E
    DependsOn:
    - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet1/DefaultRoute
  VpcpublicSubnet1EIP411541E6:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/publicSubnet1
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet1/EIP
  VpcpublicSubnet1NATGatewayA036E8A6:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - VpcpublicSubnet1EIP411541E6
        - AllocationId
      SubnetId:
        Ref: VpcpublicSubnet1Subnet2BB74ED7
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/publicSubnet1
    DependsOn:
    - VpcpublicSubnet1DefaultRouteB88F9E93
    - VpcpublicSubnet1RouteTableAssociation4E83B6E4
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet1/NATGateway
  VpcpublicSubnet2SubnetE34B022A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
      - Key: aws-cdk:subnet-name
        Value: public
      - Key: aws-cdk:subnet-type
        Value: Public
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/publicSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet2/Subnet
  VpcpublicSubnet2RouteTableC5A6DF77:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/publicSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet2/RouteTable
  VpcpublicSubnet2RouteTableAssociationCCE257FF:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcpublicSubnet2RouteTableC5A6DF77
      SubnetId:
        Ref: VpcpublicSubnet2SubnetE34B022A
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet2/RouteTableAssociation
  VpcpublicSubnet2DefaultRoute732F0BEB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: VpcIGWD7BA715C
      RouteTableId:
        Ref: VpcpublicSubnet2RouteTableC5A6DF77
    DependsOn:
    - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/publicSubnet2/DefaultRoute
  VpccomputeSubnet1Subnet76815338:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
      - Key: aws-cdk:subnet-name
        Value: compute
      - Key: aws-cdk:subnet-type
        Value: Private
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/computeSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/computeSubnet1/Subnet
  VpccomputeSubnet1RouteTable007DF4CF:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/computeSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/computeSubnet1/RouteTable
  VpccomputeSubnet1RouteTableAssociation17CCE4F0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpccomputeSubnet1RouteTable007DF4CF
      SubnetId:
        Ref: VpccomputeSubnet1Subnet76815338
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/computeSubnet1/RouteTableAssociation
  VpccomputeSubnet1DefaultRoute9E702B4B:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: VpcpublicSubnet1NATGatewayA036E8A6
      RouteTableId:
        Ref: VpccomputeSubnet1RouteTable007DF4CF
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/computeSubnet1/DefaultRoute
  VpccomputeSubnet2SubnetFA3D8B67:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
      - Key: aws-cdk:subnet-name
        Value: compute
      - Key: aws-cdk:subnet-type
        Value: Private
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/computeSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/computeSubnet2/Subnet
  VpccomputeSubnet2RouteTable779602F0:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/computeSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/computeSubnet2/RouteTable
  VpccomputeSubnet2RouteTableAssociation4E523F78:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpccomputeSubnet2RouteTable779602F0
      SubnetId:
        Ref: VpccomputeSubnet2SubnetFA3D8B67
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/computeSubnet2/RouteTableAssociation
  VpccomputeSubnet2DefaultRoute3858387F:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId:
        Ref: VpcpublicSubnet1NATGatewayA036E8A6
      RouteTableId:
        Ref: VpccomputeSubnet2RouteTable779602F0
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/computeSubnet2/DefaultRoute
  VpcrdsSubnet1SubnetC2926CEA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      CidrBlock: 10.0.4.0/28
      MapPublicIpOnLaunch: false
      Tags:
      - Key: aws-cdk:subnet-name
        Value: rds
      - Key: aws-cdk:subnet-type
        Value: Isolated
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/rdsSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/rdsSubnet1/Subnet
  VpcrdsSubnet1RouteTableE62E4ED6:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/rdsSubnet1
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/rdsSubnet1/RouteTable
  VpcrdsSubnet1RouteTableAssociationE01668F2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcrdsSubnet1RouteTableE62E4ED6
      SubnetId:
        Ref: VpcrdsSubnet1SubnetC2926CEA
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/rdsSubnet1/RouteTableAssociation
  VpcrdsSubnet2Subnet70A835C8:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      CidrBlock: 10.0.4.16/28
      MapPublicIpOnLaunch: false
      Tags:
      - Key: aws-cdk:subnet-name
        Value: rds
      - Key: aws-cdk:subnet-type
        Value: Isolated
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/rdsSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/rdsSubnet2/Subnet
  VpcrdsSubnet2RouteTable3E531D9B:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc/rdsSubnet2
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/rdsSubnet2/RouteTable
  VpcrdsSubnet2RouteTableAssociation25A7BD68:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcrdsSubnet2RouteTable3E531D9B
      SubnetId:
        Ref: VpcrdsSubnet2Subnet70A835C8
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/rdsSubnet2/RouteTableAssociation
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/Vpc
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/VPCGW
  VpcRestrictDefaultSecurityGroupCustomResourceC73DA2BE:
    Type: Custom::VpcRestrictDefaultSG
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E
        - Arn
      DefaultSecurityGroupId:
        Fn::GetAtt:
        - Vpc8378EB38
        - DefaultSecurityGroup
      Account:
        Ref: AWS::AccountId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Vpc/RestrictDefaultSecurityGroupCustomResource/Default
  CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: Inline
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:AuthorizeSecurityGroupIngress
            - ec2:AuthorizeSecurityGroupEgress
            - ec2:RevokeSecurityGroupIngress
            - ec2:RevokeSecurityGroupEgress
            Resource:
            - Fn::Join:
              - ''
              - - 'arn:'
                - Ref: AWS::Partition
                - ':ec2:'
                - Ref: AWS::Region
                - ':'
                - Ref: AWS::AccountId
                - :security-group/
                - Fn::GetAtt:
                  - Vpc8378EB38
                  - DefaultSecurityGroup
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role
  CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E:
    Type: AWS::Lambda::Function
    Properties:
      Code: CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
        - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
        - Arn
      Runtime: nodejs18.x
      Description: Lambda function for removing all inbound/outbound rules from the
        VPC default security group
    DependsOn:
    - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
    Metadata:
      SamNormalized: true
      SamResourceId: Handler
      aws:asset:path: ..\..\cdk.out\asset.7f18a11296f35510ee16538afec983ed6312e12afbf81b777089a9f8e34e2474
      aws:asset:property: Code
      aws:cdk:path: Wis2ReplayPocStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler
  Kinesis2RDSBucketCFFBD2BD:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
        - ExpirationInDays: 90
          Status: Enabled
      Tags:
      - Key: aws-cdk:auto-delete-objects
        Value: 'true'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Kinesis2RDSBucket/Resource
  Kinesis2RDSBucketPolicyD5F6BD8D:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: Kinesis2RDSBucketCFFBD2BD
      PolicyDocument:
        Statement:
        - Action:
          - s3:DeleteObject*
          - s3:GetBucket*
          - s3:List*
          - s3:PutBucketPolicy
          Effect: Allow
          Principal:
            AWS:
              Fn::GetAtt:
              - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
              - Arn
          Resource:
          - Fn::GetAtt:
            - Kinesis2RDSBucketCFFBD2BD
            - Arn
          - Fn::Join:
            - ''
            - - Fn::GetAtt:
                - Kinesis2RDSBucketCFFBD2BD
                - Arn
              - /*
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Kinesis2RDSBucket/Policy/Resource
  Kinesis2RDSBucketAutoDeleteObjectsCustomResource0F9EF1E7:
    Type: Custom::S3AutoDeleteObjects
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
        - Arn
      BucketName:
        Ref: Kinesis2RDSBucketCFFBD2BD
    DependsOn:
    - Kinesis2RDSBucketPolicyD5F6BD8D
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Kinesis2RDSBucket/AutoDeleteObjectsCustomResource/Default
  Kinesis2RDSBucketNotificationsEB3A9E39:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
        - Arn
      BucketName:
        Ref: Kinesis2RDSBucketCFFBD2BD
      NotificationConfiguration:
        QueueConfigurations:
        - Events:
          - s3:ObjectCreated:*
          Filter:
            Key:
              FilterRules:
              - Name: prefix
                Value: to-be-processed/notifications/
          QueueArn:
            Fn::GetAtt:
            - S3ImportQueueWis2ReplayPocStacknotifications550FFBC2
            - Arn
      Managed: true
    DependsOn:
    - S3ImportQueueWis2ReplayPocStacknotificationsPolicy90994C8E
    - S3ImportQueueWis2ReplayPocStacknotifications550FFBC2
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Kinesis2RDSBucket/Notifications/Resource
  CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      ManagedPolicyArns:
      - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role
  CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F:
    Type: AWS::Lambda::Function
    Properties:
      Code: CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F
      Timeout: 900
      MemorySize: 128
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
        - Arn
      Runtime: nodejs18.x
      Description:
        Fn::Join:
        - ''
        - - 'Lambda function for auto-deleting objects in '
          - Ref: Kinesis2RDSBucketCFFBD2BD
          - ' S3 bucket.'
    DependsOn:
    - CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092
    Metadata:
      SamNormalized: true
      SamResourceId: Handler
      aws:asset:path: ..\..\cdk.out\asset.b7f33614a69548d6bafe224d751a7ef238cde19097415e553fe8b63a4c8fd8a6
      aws:asset:property: Code
      aws:cdk:path: Wis2ReplayPocStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler
  publishmetricpolicy76B57748:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: cloudwatch:PutMetricData
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      PolicyName: publishmetricpolicy76B57748
      Roles:
      - Ref: S3importFunctionServiceRole436A0AA5
      - Ref: replayLambdaServiceRoleF7D6803B
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/publish-metric-policy/Resource
  ReplayStream046CE407:
    Type: AWS::Kinesis::Stream
    Properties:
      RetentionPeriodHours: 24
      ShardCount: 2
      StreamEncryption:
        Fn::If:
        - AwsCdkKinesisEncryptedStreamsUnsupportedRegions
        - Ref: AWS::NoValue
        - EncryptionType: KMS
          KeyId: alias/aws/kinesis
      StreamModeDetails:
        StreamMode: PROVISIONED
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/ReplayStream/Resource
  ProcessorServiceRole5039D372:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/Processor/ServiceRole/Resource
  Processor60228016:
    Type: AWS::Lambda::Function
    Properties:
      Code: Processor60228016
      Handler: app.lambda_handler
      Role:
        Fn::GetAtt:
        - ProcessorServiceRole5039D372
        - Arn
      Runtime: python3.9
    DependsOn:
    - ProcessorServiceRole5039D372
    Metadata:
      SamNormalized: true
      SamResourceId: Processor
      aws:asset:is-bundled: false
      aws:asset:path: ..\..\cdk.out\asset.852557017606703b2f1219ee412f5cae35b534ccdeea24d4cf4fb75042cb00e8
      aws:asset:property: Code
      aws:cdk:path: Wis2ReplayPocStack/Processor/Resource
  ReplayFirehoseStreamServiceRoleBA28413B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/ReplayFirehoseStream/Service Role/Resource
  ReplayFirehoseStreamServiceRoleDefaultPolicy933B0D69:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - kinesis:DescribeStream
          - kinesis:DescribeStreamConsumer
          - kinesis:DescribeStreamSummary
          - kinesis:GetRecords
          - kinesis:GetShardIterator
          - kinesis:ListShards
          - kinesis:ListStreams
          - kinesis:SubscribeToShard
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - ReplayStream046CE407
            - Arn
        Version: '2012-10-17'
      PolicyName: ReplayFirehoseStreamServiceRoleDefaultPolicy933B0D69
      Roles:
      - Ref: ReplayFirehoseStreamServiceRoleBA28413B
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/ReplayFirehoseStream/Service Role/DefaultPolicy/Resource
  ReplayFirehoseStreamS3DestinationRoleB1DD4A7C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: firehose.amazonaws.com
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/ReplayFirehoseStream/S3 Destination Role/Resource
  ReplayFirehoseStreamS3DestinationRoleDefaultPolicy5DEAEFE1:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:Abort*
          - s3:DeleteObject*
          - s3:GetBucket*
          - s3:GetObject*
          - s3:List*
          - s3:PutObject
          - s3:PutObjectLegalHold
          - s3:PutObjectRetention
          - s3:PutObjectTagging
          - s3:PutObjectVersionTagging
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - Kinesis2RDSBucketCFFBD2BD
            - Arn
          - Fn::Join:
            - ''
            - - Fn::GetAtt:
                - Kinesis2RDSBucketCFFBD2BD
                - Arn
              - /*
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - ReplayFirehoseStreamLogGroupE85F3F3E
            - Arn
        - Action: lambda:InvokeFunction
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - Processor60228016
            - Arn
          - Fn::Join:
            - ''
            - - Fn::GetAtt:
                - Processor60228016
                - Arn
              - :*
        Version: '2012-10-17'
      PolicyName: ReplayFirehoseStreamS3DestinationRoleDefaultPolicy5DEAEFE1
      Roles:
      - Ref: ReplayFirehoseStreamS3DestinationRoleB1DD4A7C
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/ReplayFirehoseStream/S3 Destination Role/DefaultPolicy/Resource
  ReplayFirehoseStreamLogGroupE85F3F3E:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 731
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/ReplayFirehoseStream/LogGroup/Resource
  ReplayFirehoseStreamLogGroupS3Destination5C8B2C64:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: ReplayFirehoseStreamLogGroupE85F3F3E
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/ReplayFirehoseStream/LogGroup/S3Destination/Resource
  ReplayFirehoseStream34B19C35:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: KinesisStreamAsSource
      ExtendedS3DestinationConfiguration:
        BucketARN:
          Fn::GetAtt:
          - Kinesis2RDSBucketCFFBD2BD
          - Arn
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName:
            Ref: ReplayFirehoseStreamLogGroupE85F3F3E
          LogStreamName:
            Ref: ReplayFirehoseStreamLogGroupS3Destination5C8B2C64
        Prefix: to-be-processed/notifications/
        ProcessingConfiguration:
          Enabled: true
          Processors:
          - Parameters:
            - ParameterName: RoleArn
              ParameterValue:
                Fn::GetAtt:
                - ReplayFirehoseStreamS3DestinationRoleB1DD4A7C
                - Arn
            - ParameterName: LambdaArn
              ParameterValue:
                Fn::GetAtt:
                - Processor60228016
                - Arn
            - ParameterName: BufferIntervalInSeconds
              ParameterValue: '60'
            - ParameterName: BufferSizeInMBs
              ParameterValue: '1'
            - ParameterName: NumberOfRetries
              ParameterValue: '5'
            Type: Lambda
        RoleARN:
          Fn::GetAtt:
          - ReplayFirehoseStreamS3DestinationRoleB1DD4A7C
          - Arn
      KinesisStreamSourceConfiguration:
        KinesisStreamARN:
          Fn::GetAtt:
          - ReplayStream046CE407
          - Arn
        RoleARN:
          Fn::GetAtt:
          - ReplayFirehoseStreamServiceRoleBA28413B
          - Arn
    DependsOn:
    - ReplayFirehoseStreamS3DestinationRoleDefaultPolicy5DEAEFE1
    - ReplayFirehoseStreamServiceRoleDefaultPolicy933B0D69
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/ReplayFirehoseStream/Resource
  BridgeEcsClusterFCAB7579:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeEcsCluster/Resource
  BridgeTaskTaskRoleC72EA09C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeTask/TaskRole/Resource
  BridgeTaskTaskRoleDefaultPolicy893C28CB:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: cloudwatch:PutMetricData
          Effect: Allow
          Resource: '*'
        - Action:
          - kinesis:ListShards
          - kinesis:PutRecord
          - kinesis:PutRecords
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - ReplayStream046CE407
            - Arn
        Version: '2012-10-17'
      PolicyName: BridgeTaskTaskRoleDefaultPolicy893C28CB
      Roles:
      - Ref: BridgeTaskTaskRoleC72EA09C
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeTask/TaskRole/DefaultPolicy/Resource
  BridgeTask82700E68:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Environment:
        - Name: WIS_USERNAME
          Value: everyone
        - Name: WIS_PASSWORD
          Value: everyone
        - Name: TOPICS
          Value: cache/a/wis2/#
        - Name: CLIENT_ID
          Value: wis2replay_mf_
        - Name: WIS_BROKER_HOST
          Value: globalbroker.meteo.fr
        - Name: WIS_BROKER_PORT
          Value: '8883'
        - Name: LOG_LEVEL
          Value: INFO
        - Name: STREAM_NAME
          Value:
            Ref: ReplayStream046CE407
        - Name: REPORTING_THRESHOLD
          Value: '500'
        - Name: BATCH_SIZE
          Value: '50'
        - Name: STACK_ID
          Value: Wis2ReplayPocStack
        - Name: ABBREVIATION
          Value: MF
        Essential: true
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:259bb4d5178372fa5bcdb2cbf31f0e774680ec3dd74c79f1206a83d711e87863
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: BridgeTaskBridgeAppMFLogGroup2F3DDEF1
            awslogs-stream-prefix: BrideLog_MF
            awslogs-region:
              Ref: AWS::Region
            mode: non-blocking
        Name: BridgeApp_MF
      - Environment:
        - Name: WIS_USERNAME
          Value: everyone
        - Name: WIS_PASSWORD
          Value: everyone
        - Name: TOPICS
          Value: cache/a/wis2/#
        - Name: CLIENT_ID
          Value: wis2replay_cma_
        - Name: WIS_BROKER_HOST
          Value: gb.wis.cma.cn
        - Name: WIS_BROKER_PORT
          Value: '1883'
        - Name: LOG_LEVEL
          Value: INFO
        - Name: STREAM_NAME
          Value:
            Ref: ReplayStream046CE407
        - Name: REPORTING_THRESHOLD
          Value: '500'
        - Name: BATCH_SIZE
          Value: '50'
        - Name: STACK_ID
          Value: Wis2ReplayPocStack
        - Name: ABBREVIATION
          Value: CMA
        Essential: true
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:259bb4d5178372fa5bcdb2cbf31f0e774680ec3dd74c79f1206a83d711e87863
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: BridgeTaskBridgeAppCMALogGroup8B10AB02
            awslogs-stream-prefix: BrideLog_CMA
            awslogs-region:
              Ref: AWS::Region
            mode: non-blocking
        Name: BridgeApp_CMA
      - Environment:
        - Name: WIS_USERNAME
          Value: everyone
        - Name: WIS_PASSWORD
          Value: everyone
        - Name: TOPICS
          Value: cache/a/wis2/#
        - Name: CLIENT_ID
          Value: wis2replay_noaa_
        - Name: WIS_BROKER_HOST
          Value: wis2globalbroker.nws.noaa.gov
        - Name: WIS_BROKER_PORT
          Value: '1883'
        - Name: LOG_LEVEL
          Value: INFO
        - Name: STREAM_NAME
          Value:
            Ref: ReplayStream046CE407
        - Name: REPORTING_THRESHOLD
          Value: '500'
        - Name: BATCH_SIZE
          Value: '50'
        - Name: STACK_ID
          Value: Wis2ReplayPocStack
        - Name: ABBREVIATION
          Value: NOAA
        Essential: true
        Image:
          Fn::Sub: ${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}:259bb4d5178372fa5bcdb2cbf31f0e774680ec3dd74c79f1206a83d711e87863
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group:
              Ref: BridgeTaskBridgeAppNOAALogGroupC3E2BAC3
            awslogs-stream-prefix: BrideLog_NOAA
            awslogs-region:
              Ref: AWS::Region
            mode: non-blocking
        Name: BridgeApp_NOAA
      Cpu: '512'
      ExecutionRoleArn:
        Fn::GetAtt:
        - BridgeTaskExecutionRole61064BF7
        - Arn
      Family: BridgeTask
      Memory: '1024'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
        - BridgeTaskTaskRoleC72EA09C
        - Arn
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeTask/Resource
  BridgeTaskExecutionRole61064BF7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeTask/ExecutionRole/Resource
  BridgeTaskExecutionRoleDefaultPolicy9CCFD27C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - cloudwatch:PutMetricData
          - ecr:GetAuthorizationToken
          Effect: Allow
          Resource: '*'
        - Action:
          - ecr:BatchCheckLayerAvailability
          - ecr:BatchGetImage
          - ecr:GetDownloadUrlForLayer
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':ecr:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - :repository/
              - Fn::Sub: cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - BridgeTaskBridgeAppCMALogGroup8B10AB02
            - Arn
          - Fn::GetAtt:
            - BridgeTaskBridgeAppMFLogGroup2F3DDEF1
            - Arn
          - Fn::GetAtt:
            - BridgeTaskBridgeAppNOAALogGroupC3E2BAC3
            - Arn
        Version: '2012-10-17'
      PolicyName: BridgeTaskExecutionRoleDefaultPolicy9CCFD27C
      Roles:
      - Ref: BridgeTaskExecutionRole61064BF7
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeTask/ExecutionRole/DefaultPolicy/Resource
  BridgeTaskBridgeAppMFLogGroup2F3DDEF1:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeTask/BridgeApp_MF/LogGroup/Resource
  BridgeTaskBridgeAppCMALogGroup8B10AB02:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeTask/BridgeApp_CMA/LogGroup/Resource
  BridgeTaskBridgeAppNOAALogGroupC3E2BAC3:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeTask/BridgeApp_NOAA/LogGroup/Resource
  BridgeService9466B11E:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: BridgeEcsClusterFCAB7579
      DeploymentConfiguration:
        Alarms:
          AlarmNames: []
          Enable: false
          Rollback: false
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
          - Fn::GetAtt:
            - BridgeServiceSecurityGroup35894484
            - GroupId
          Subnets:
          - Ref: VpccomputeSubnet1Subnet76815338
          - Ref: VpccomputeSubnet2SubnetFA3D8B67
      TaskDefinition:
        Ref: BridgeTask82700E68
    DependsOn:
    - BridgeTaskTaskRoleDefaultPolicy893C28CB
    - BridgeTaskTaskRoleC72EA09C
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeService/Service
  BridgeServiceSecurityGroup35894484:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wis2ReplayPocStack/BridgeService/SecurityGroup
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic by default
        IpProtocol: '-1'
      VpcId:
        Ref: Vpc8378EB38
    DependsOn:
    - BridgeTaskTaskRoleDefaultPolicy893C28CB
    - BridgeTaskTaskRoleC72EA09C
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BridgeService/SecurityGroup/Resource
  MysqlRdsCredentials1A291113:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description:
        Fn::Join:
        - ''
        - - 'Generated by the CDK for stack: '
          - Ref: AWS::StackName
      GenerateSecretString:
        ExcludeCharacters: ' %+~`#$&*()|[]{}:;<>?!''/@"\'
        GenerateStringKey: password
        PasswordLength: 30
        SecretStringTemplate: '{"username":"admin"}'
      Name: /wis2replaypocstack/rds/creds/mysql-01
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/MysqlRdsCredentials/Resource
  MysqlRdsCredentialsAttachment355BBE11:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: MysqlRdsCredentials1A291113
      TargetId:
        Ref: AuroraCluster23D869C0
      TargetType: AWS::RDS::DBCluster
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/MysqlRdsCredentials/Attachment/Resource
  SecurityGroupDD263621:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh access to aurora cluster
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic by default
        IpProtocol: '-1'
      SecurityGroupIngress:
      - CidrIp:
          Fn::GetAtt:
          - Vpc8378EB38
          - CidrBlock
        Description:
          Fn::Join:
          - ''
          - - 'from '
            - Fn::GetAtt:
              - Vpc8378EB38
              - CidrBlock
            - :3306
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/SecurityGroup/Resource
  SecurityGroupfromWis2ReplayPocStackBastionSg8965236E330612DDDEE0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: from Wis2ReplayPocStackBastionSg8965236E:3306
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
        - SecurityGroupDD263621
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - BastionSg3D6BE75A
        - GroupId
      ToPort: 3306
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/SecurityGroup/from Wis2ReplayPocStackBastionSg8965236E:3306
  SecurityGroupfromWis2ReplayPocStackreplayLambdaSecurityGroup83C775A33306AF5DBAE0:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: from Wis2ReplayPocStackreplayLambdaSecurityGroup83C775A3:3306
      FromPort: 3306
      GroupId:
        Fn::GetAtt:
        - SecurityGroupDD263621
        - GroupId
      IpProtocol: tcp
      SourceSecurityGroupId:
        Fn::GetAtt:
        - replayLambdaSecurityGroupA4A3683E
        - GroupId
      ToPort: 3306
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/SecurityGroup/from Wis2ReplayPocStackreplayLambdaSecurityGroup83C775A3:3306
  AuroraClusterSubnetsF3E9E6AD:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for AuroraCluster database
      SubnetIds:
      - Ref: VpccomputeSubnet1Subnet76815338
      - Ref: VpccomputeSubnet2SubnetFA3D8B67
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/AuroraCluster/Subnets/Default
  AuroraCluster23D869C0:
    Type: AWS::RDS::DBCluster
    Properties:
      CopyTagsToSnapshot: true
      DBClusterParameterGroupName: default.aurora-mysql5.7
      DBSubnetGroupName:
        Ref: AuroraClusterSubnetsF3E9E6AD
      DatabaseName: main
      EnableHttpEndpoint: true
      Engine: aurora-mysql
      EngineMode: serverless
      MasterUserPassword:
        Fn::Join:
        - ''
        - - '{{resolve:secretsmanager:'
          - Ref: MysqlRdsCredentials1A291113
          - :SecretString:password::}}
      MasterUsername:
        Fn::Join:
        - ''
        - - '{{resolve:secretsmanager:'
          - Ref: MysqlRdsCredentials1A291113
          - :SecretString:username::}}
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 32
        MinCapacity: 1
        SecondsUntilAutoPause: 600
      StorageEncrypted: true
      VpcSecurityGroupIds:
      - Fn::GetAtt:
        - SecurityGroupDD263621
        - GroupId
    UpdateReplacePolicy: Snapshot
    DeletionPolicy: Snapshot
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/AuroraCluster/Resource
  BastionSg3D6BE75A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wis2ReplayPocStack/BastionSg
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic by default
        IpProtocol: '-1'
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        Description: allow SSH access from anywhere
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
        Ref: Vpc8378EB38
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BastionSg/Resource
  BastionEc2InstanceInstanceRole10259420:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
        Version: '2012-10-17'
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/BastionEc2Instance
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BastionEc2Instance/InstanceRole/Resource
  BastionEc2InstanceInstanceProfileF1D176AB:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - Ref: BastionEc2InstanceInstanceRole10259420
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BastionEc2Instance/InstanceProfile
  BastionEc2Instance2754A287:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      IamInstanceProfile:
        Ref: BastionEc2InstanceInstanceProfileF1D176AB
      ImageId:
        Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
      InstanceType: t2.micro
      KeyName: wis2monitoring-key
      SecurityGroupIds:
      - Fn::GetAtt:
        - BastionSg3D6BE75A
        - GroupId
      SubnetId:
        Ref: VpcpublicSubnet1Subnet2BB74ED7
      Tags:
      - Key: Name
        Value: Wis2ReplayPocStack/BastionEc2Instance
      UserData:
        Fn::Base64: '#!/bin/bash'
    DependsOn:
    - BastionEc2InstanceInstanceRole10259420
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BastionEc2Instance/Resource
  cleanupLambdaServiceRoleF99C5CCA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/cleanupLambda/ServiceRole/Resource
  cleanupLambdaServiceRoleDefaultPolicy70913772:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - rds-data:BatchExecuteStatement
          - rds-data:BeginTransaction
          - rds-data:CommitTransaction
          - rds-data:ExecuteStatement
          - rds-data:RollbackTransaction
          Effect: Allow
          Resource: '*'
        - Action:
          - secretsmanager:DescribeSecret
          - secretsmanager:GetSecretValue
          Effect: Allow
          Resource:
            Ref: MysqlRdsCredentialsAttachment355BBE11
        Version: '2012-10-17'
      PolicyName: cleanupLambdaServiceRoleDefaultPolicy70913772
      Roles:
      - Ref: cleanupLambdaServiceRoleF99C5CCA
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/cleanupLambda/ServiceRole/DefaultPolicy/Resource
  cleanupLambdaC7142841:
    Type: AWS::Lambda::Function
    Properties:
      Code: cleanupLambdaC7142841
      Environment:
        Variables:
          BUCKET:
            Fn::GetAtt:
            - Kinesis2RDSBucketCFFBD2BD
            - Arn
          CLUSTER_ARN:
            Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':rds:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - ':cluster:'
              - Ref: AuroraCluster23D869C0
          SECRET_ARN:
            Ref: MysqlRdsCredentials1A291113
          DB_NAME: main
          NR_DAYS_KEEP: '2'
          LAMBDA_LOG_LEVEL: DEBUG
          TABLES: notifications
      Handler: cleanup.handler
      Role:
        Fn::GetAtt:
        - cleanupLambdaServiceRoleF99C5CCA
        - Arn
      Runtime: python3.9
      Timeout: 600
    DependsOn:
    - cleanupLambdaServiceRoleDefaultPolicy70913772
    - cleanupLambdaServiceRoleF99C5CCA
    Metadata:
      SamNormalized: true
      SamResourceId: cleanupLambda
      aws:asset:is-bundled: false
      aws:asset:path: ..\..\cdk.out\asset.590864015721c9d5e9df1ed08e028bc46212d1871bdc61869be2413f4a75864e
      aws:asset:property: Code
      aws:cdk:path: Wis2ReplayPocStack/cleanupLambda/Resource
  cleanupLambdaRule1BC25C14:
    Type: AWS::Events::Rule
    Properties:
      Description: cleanup with DB periodically
      ScheduleExpression: rate(10 minutes)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - cleanupLambdaC7142841
          - Arn
        Id: Target0
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/cleanupLambdaRule/Resource
  cleanupLambdaRuleAllowEventRuleWis2ReplayPocStackcleanupLambda15211787AD44B461:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - cleanupLambdaC7142841
        - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - cleanupLambdaRule1BC25C14
        - Arn
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/cleanupLambdaRule/AllowEventRuleWis2ReplayPocStackcleanupLambda15211787
  DLDqueueWis2ReplayPocStacknotificationsC4191E92:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      MessageRetentionPeriod: 1209600
      QueueName: dlq_Wis2ReplayPocStack_notifications
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/DLDqueue_Wis2ReplayPocStack_notifications/Resource
  S3ImportQueueWis2ReplayPocStacknotifications550FFBC2:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: S3ImportQueue_Wis2ReplayPocStack_notifications
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
          - DLDqueueWis2ReplayPocStacknotificationsC4191E92
          - Arn
        maxReceiveCount: 2
      VisibilityTimeout: 1080
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/S3ImportQueue_Wis2ReplayPocStack_notifications/Resource
  S3ImportQueueWis2ReplayPocStacknotificationsPolicy90994C8E:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          - sqs:SendMessage
          Condition:
            ArnLike:
              aws:SourceArn:
                Fn::GetAtt:
                - Kinesis2RDSBucketCFFBD2BD
                - Arn
          Effect: Allow
          Principal:
            Service: s3.amazonaws.com
          Resource:
            Fn::GetAtt:
            - S3ImportQueueWis2ReplayPocStacknotifications550FFBC2
            - Arn
        Version: '2012-10-17'
      Queues:
      - Ref: S3ImportQueueWis2ReplayPocStacknotifications550FFBC2
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/S3ImportQueue_Wis2ReplayPocStack_notifications/Policy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: s3:PutBucketNotification
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
      - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications"
        resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: "import boto3  # type: ignore\nimport json\nimport logging\nimport\
          \ urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION\
          \ = 'EventBridgeConfiguration'\n\nCONFIGURATION_TYPES = [\"TopicConfigurations\"\
          , \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event:\
          \ dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\
          \"\n  try:\n    props = event[\"ResourceProperties\"]\n    bucket = props[\"\
          BucketName\"]\n    notification_configuration = props[\"NotificationConfiguration\"\
          ]\n    request_type = event[\"RequestType\"]\n    managed = props.get('Managed',\
          \ 'true').lower() == 'true'\n    stack_id = event['StackId']\n\n    if managed:\n\
          \      config = handle_managed(request_type, notification_configuration)\n\
          \    else:\n      config = handle_unmanaged(bucket, stack_id, request_type,\
          \ notification_configuration)\n\n    put_bucket_notification_configuration(bucket,\
          \ config)\n  except Exception as e:\n    logging.exception(\"Failed to put\
          \ bucket notification configuration\")\n    response_status = \"FAILED\"\
          \n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event,\
          \ context, response_status, error_message)\n\ndef handle_managed(request_type,\
          \ notification_configuration):\n  if request_type == 'Delete':\n    return\
          \ {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket,\
          \ stack_id, request_type, notification_configuration):\n  external_notifications\
          \ = find_external_notifications(bucket, stack_id)\n\n  if request_type ==\
          \ 'Delete':\n    return external_notifications\n\n  def with_id(notification):\n\
          \    notification['Id'] = f\"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}\"\
          \n    return notification\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n\
          \    external = external_notifications.get(t, [])\n    incoming = [with_id(n)\
          \ for n in notification_configuration.get(t, [])]\n    notifications[t]\
          \ = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n\
          \    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n\
          \  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION]\
          \ = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\
          \ndef find_external_notifications(bucket, stack_id):\n  existing_notifications\
          \ = get_bucket_notification_configuration(bucket)\n  external_notifications\
          \ = {}\n  for t in CONFIGURATION_TYPES:\n    external_notifications[t] =\
          \ [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"\
          {stack_id}-\")]\n\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n\
          \    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\
          \n  return external_notifications\n\ndef get_bucket_notification_configuration(bucket):\n\
          \  return s3.get_bucket_notification_configuration(Bucket=bucket)\n\ndef\
          \ put_bucket_notification_configuration(bucket, notification_configuration):\n\
          \  s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)\n\
          \ndef submit_response(event: dict, context, response_status: str, error_message:\
          \ str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n\
          \      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream:\
          \ {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"\
          PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\"\
          : event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n    \
          \  \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\"\
          : False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\
          \", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"\
          ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n \
          \   with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"\
          utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception\
          \ as e:\n      print(\"send(..) failed executing request.urlopen(..): \"\
          \ + str(e))\n"
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
        - Arn
      Runtime: python3.9
      Timeout: 300
    DependsOn:
    - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
    - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  S3importFunctionServiceRole436A0AA5:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/S3importFunction/ServiceRole/Resource
  S3importFunctionServiceRoleDefaultPolicyEA33DA48:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:Abort*
          - s3:DeleteObject*
          - s3:GetBucket*
          - s3:GetObject*
          - s3:List*
          - s3:PutObject
          - s3:PutObjectLegalHold
          - s3:PutObjectRetention
          - s3:PutObjectTagging
          - s3:PutObjectVersionTagging
          Effect: Allow
          Resource:
          - Fn::GetAtt:
            - Kinesis2RDSBucketCFFBD2BD
            - Arn
          - Fn::Join:
            - ''
            - - Fn::GetAtt:
                - Kinesis2RDSBucketCFFBD2BD
                - Arn
              - /*
        - Action:
          - rds-data:BatchExecuteStatement
          - rds-data:BeginTransaction
          - rds-data:CommitTransaction
          - rds-data:ExecuteStatement
          - rds-data:RollbackTransaction
          Effect: Allow
          Resource: '*'
        - Action:
          - secretsmanager:DescribeSecret
          - secretsmanager:GetSecretValue
          Effect: Allow
          Resource:
            Ref: MysqlRdsCredentialsAttachment355BBE11
        - Action:
          - sqs:ChangeMessageVisibility
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          - sqs:ReceiveMessage
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - S3ImportQueueWis2ReplayPocStacknotifications550FFBC2
            - Arn
        Version: '2012-10-17'
      PolicyName: S3importFunctionServiceRoleDefaultPolicyEA33DA48
      Roles:
      - Ref: S3importFunctionServiceRole436A0AA5
    DependsOn:
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/S3importFunction/ServiceRole/DefaultPolicy/Resource
  S3importFunctionSecurityGroup46AE7116:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function Wis2ReplayPocStackS3importFunction7B6A000E
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic by default
        IpProtocol: '-1'
      VpcId:
        Ref: Vpc8378EB38
    DependsOn:
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/S3importFunction/SecurityGroup/Resource
  S3importFunction81AC74A1:
    Type: AWS::Lambda::Function
    Properties:
      Architectures:
      - x86_64
      Code: S3importFunction81AC74A1
      Environment:
        Variables:
          BUCKET:
            Fn::GetAtt:
            - Kinesis2RDSBucketCFFBD2BD
            - Arn
          CLUSTER_ARN:
            Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - ':rds:'
              - Ref: AWS::Region
              - ':'
              - Ref: AWS::AccountId
              - ':cluster:'
              - Ref: AuroraCluster23D869C0
          SECRET_ARN:
            Ref: MysqlRdsCredentials1A291113
          DB_NAME: main
          LAMBDA_LOG_LEVEL: ERROR
          PROCESSED_PREFIX: processed
          DB_BATCH_SIZE: '1000'
          REPLAYNOTIFICATIONS_SOURCE_ARN:
            Fn::GetAtt:
            - S3ImportQueueWis2ReplayPocStacknotifications550FFBC2
            - Arn
      Handler: app.lambda_handler
      Role:
        Fn::GetAtt:
        - S3importFunctionServiceRole436A0AA5
        - Arn
      Runtime: python3.9
      Timeout: 600
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - S3importFunctionSecurityGroup46AE7116
          - GroupId
        SubnetIds:
        - Ref: VpccomputeSubnet1Subnet76815338
        - Ref: VpccomputeSubnet2SubnetFA3D8B67
    DependsOn:
    - S3importFunctionServiceRoleDefaultPolicyEA33DA48
    - S3importFunctionServiceRole436A0AA5
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      SamNormalized: true
      SamResourceId: S3importFunction
      aws:asset:is-bundled: false
      aws:asset:path: ..\..\cdk.out\asset.01eb77d05771f5b57094cc1e85142d1a71464b39599b593b1d47119867851d3d
      aws:asset:property: Code
      aws:cdk:path: Wis2ReplayPocStack/S3importFunction/Resource
  S3importFunctionSqsEventSourceWis2ReplayPocStackS3ImportQueueWis2ReplayPocStacknotifications4EFD0000BB31DD3E:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 5
      EventSourceArn:
        Fn::GetAtt:
        - S3ImportQueueWis2ReplayPocStacknotifications550FFBC2
        - Arn
      FunctionName:
        Ref: S3importFunction81AC74A1
      FunctionResponseTypes:
      - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 10
      ScalingConfig:
        MaximumConcurrency: 3
    DependsOn:
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/S3importFunction/SqsEventSource:Wis2ReplayPocStackS3ImportQueueWis2ReplayPocStacknotifications4EFD0000/Resource
  myQueue4FDFF71C:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/myQueue/Resource
  TopicRule40A4EA44:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Actions:
        - Sqs:
            QueueUrl:
              Ref: myQueue4FDFF71C
            RoleArn:
              Fn::GetAtt:
              - TopicRuleTopicRuleActionRole246C4F77
              - Arn
            UseBase64: false
        AwsIotSqlVersion: '2016-03-23'
        Sql: SELECT * FROM '$aws/events/subscriptions/subscribed/#'
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/TopicRule/Resource
  TopicRuleTopicRuleActionRole246C4F77:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: iot.amazonaws.com
        Version: '2012-10-17'
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/TopicRule/TopicRuleActionRole/Resource
  TopicRuleTopicRuleActionRoleDefaultPolicy99ADD687:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action: sqs:SendMessage
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - myQueue4FDFF71C
            - Arn
        Version: '2012-10-17'
      PolicyName: TopicRuleTopicRuleActionRoleDefaultPolicy99ADD687
      Roles:
      - Ref: TopicRuleTopicRuleActionRole246C4F77
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/TopicRule/TopicRuleActionRole/DefaultPolicy/Resource
  replayQueueB2E8E12B:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 1800
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/replayQueue/Resource
  myFunctionServiceRole6C9528F3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/AWSIoTDataAccess
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/myFunction/ServiceRole/Resource
  myFunctionServiceRoleDefaultPolicyECBA61F7:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          - sqs:SendMessage
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - replayQueueB2E8E12B
            - Arn
        - Action:
          - sqs:ChangeMessageVisibility
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          - sqs:ReceiveMessage
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - myQueue4FDFF71C
            - Arn
        Version: '2012-10-17'
      PolicyName: myFunctionServiceRoleDefaultPolicyECBA61F7
      Roles:
      - Ref: myFunctionServiceRole6C9528F3
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/myFunction/ServiceRole/DefaultPolicy/Resource
  myFunction884E1557:
    Type: AWS::Lambda::Function
    Properties:
      Code: myFunction884E1557
      Environment:
        Variables:
          QUEUE_URL:
            Ref: replayQueueB2E8E12B
          STEP_MINUTES: '5'
          LAMBDA_LOG_LEVEL: DEBUG
      Handler: app.handler
      Role:
        Fn::GetAtt:
        - myFunctionServiceRole6C9528F3
        - Arn
      Runtime: python3.9
      Timeout: 60
    DependsOn:
    - myFunctionServiceRoleDefaultPolicyECBA61F7
    - myFunctionServiceRole6C9528F3
    Metadata:
      SamNormalized: true
      SamResourceId: myFunction
      aws:asset:is-bundled: false
      aws:asset:path: ..\..\cdk.out\asset.b9f4c3bfd335ed12015503bb402f989549d255be057015c81686c9bbd0fcd618
      aws:asset:property: Code
      aws:cdk:path: Wis2ReplayPocStack/myFunction/Resource
  myFunctionSqsEventSourceWis2ReplayPocStackmyQueue4CBC45B06138DB72:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn:
        Fn::GetAtt:
        - myQueue4FDFF71C
        - Arn
      FunctionName:
        Ref: myFunction884E1557
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/myFunction/SqsEventSource:Wis2ReplayPocStackmyQueue4CBC45B0/Resource
  replayLambdaServiceRoleF7D6803B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/AWSIoTDataAccess
    DependsOn:
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/replayLambda/ServiceRole/Resource
  replayLambdaServiceRoleDefaultPolicy76670493:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - secretsmanager:DescribeSecret
          - secretsmanager:GetSecretValue
          Effect: Allow
          Resource:
            Ref: MysqlRdsCredentials1A291113
        - Action:
          - sqs:ChangeMessageVisibility
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          - sqs:ReceiveMessage
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - replayQueueB2E8E12B
            - Arn
        Version: '2012-10-17'
      PolicyName: replayLambdaServiceRoleDefaultPolicy76670493
      Roles:
      - Ref: replayLambdaServiceRoleF7D6803B
    DependsOn:
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/replayLambda/ServiceRole/DefaultPolicy/Resource
  replayLambdaSecurityGroupA4A3683E:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatic security group for Lambda Function Wis2ReplayPocStackreplayLambda56598E3D
      SecurityGroupEgress:
      - CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic by default
        IpProtocol: '-1'
      VpcId:
        Ref: Vpc8378EB38
    DependsOn:
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/replayLambda/SecurityGroup/Resource
  replayLambda953515F4:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ImageUri: replaylambda953515f4:latest
      Environment:
        Variables:
          LAMBDA_LOG_LEVEL: INFO
          SECRET_NAME:
            Fn::Join:
            - '-'
            - - Fn::Select:
                - 0
                - Fn::Split:
                  - '-'
                  - Fn::Select:
                    - 6
                    - Fn::Split:
                      - ':'
                      - Ref: MysqlRdsCredentials1A291113
              - Fn::Select:
                - 1
                - Fn::Split:
                  - '-'
                  - Fn::Select:
                    - 6
                    - Fn::Split:
                      - ':'
                      - Ref: MysqlRdsCredentials1A291113
          DB_OVERRIDE: 'false'
      MemorySize: 128
      PackageType: Image
      Role:
        Fn::GetAtt:
        - replayLambdaServiceRoleF7D6803B
        - Arn
      Timeout: 600
      VpcConfig:
        SecurityGroupIds:
        - Fn::GetAtt:
          - replayLambdaSecurityGroupA4A3683E
          - GroupId
        SubnetIds:
        - Ref: VpccomputeSubnet1Subnet76815338
        - Ref: VpccomputeSubnet2SubnetFA3D8B67
    DependsOn:
    - replayLambdaServiceRoleDefaultPolicy76670493
    - replayLambdaServiceRoleF7D6803B
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      DockerBuildArgs: {}
      DockerContext: C:\Users\Timo\Documents\git\wis2_replay_poc\cdk.out\asset.5af2171c20ae3b9c96e0d35dff487edd21b691aceaf472d6182b1e0bf8277aa0
      Dockerfile: Dockerfile
      SamNormalized: true
      SamResourceId: replayLambda
      aws:asset:dockerfile-path: Dockerfile
      aws:asset:path: ..\..\cdk.out\asset.5af2171c20ae3b9c96e0d35dff487edd21b691aceaf472d6182b1e0bf8277aa0
      aws:asset:property: Code.ImageUri
      aws:cdk:path: Wis2ReplayPocStack/replayLambda/Resource
  replayLambdaSqsEventSourceWis2ReplayPocStackreplayQueue8C79AF82AABFC57F:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn:
        Fn::GetAtt:
        - replayQueueB2E8E12B
        - Arn
      FunctionName:
        Ref: replayLambda953515F4
    DependsOn:
    - VpccomputeSubnet1DefaultRoute9E702B4B
    - VpccomputeSubnet1RouteTableAssociation17CCE4F0
    - VpccomputeSubnet2DefaultRoute3858387F
    - VpccomputeSubnet2RouteTableAssociation4E523F78
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/replayLambda/SqsEventSource:Wis2ReplayPocStackreplayQueue8C79AF82/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/31UyW7jMAz9lt4dNc2c5jZZ2iLALB6n6LWgZcZRY0seLS4CI/8+lCUvSAdzMR8pinokH7xiDw9L1i3v4MMseHFeVCJn3cECPycUeuuQr1j32vBke5Sv6TZJXV4JfnC5ROtjE8qUs/gCeYVTfIqtjVFcgBVKjskePO5Tb36CfQaLH3BJUi1aglPhvbSoCQ8JgUn01pa4nmqUNjkgd1rYy7NWruk5/Dewl6VGY5K9NBYkx/BUwNfEfGHdxvFzoBBRMKmiCVymcPSDswFDtwXUrJvyIspUmM1gh9dSrY6iomtnIdEI4xegEeqeco+uSQV1XgDrnpzkwxDnOEVdC2O899jSNA7KaY4/oGmELPtBf47uFDHW+xpKHEr5xt/AGLSGrb1JKlUSoe+qHKc4YgIT0dEZ2zgKjSdlkNHpDivRor7EfORUc1s5Q5v1lwf4BLoErxhz3uFRSDG0dxtR0gK9omexePeAuhVhmxFe6Tk9NDXrOfRHZyzDRhlhlb749SW6IHY7sJCTR5rR6MWliX9Fghm4BoGOU9ltPgViJs20r2FqkPSsps57KYay3rwQdbQzKY8JtyfUi98j8ctcFJPzyjF/KPTboetjAfTfSYQzlwSqrF/Li2oEDxUyNL04ki2RVvXk0hP/PiLZtqKgSfSDpH9GGaVG2ynGzc0kmIKGGuPKfznbOOpnuYCqOQFb3n2L/6B7b7sbEcWsGx1RG/Fg6uSaSFUgezf37WrJvlLhdyPEQjtpRY0sC/Yvg193uvkEAAA=
    Metadata:
      aws:cdk:path: Wis2ReplayPocStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  AwsCdkKinesisEncryptedStreamsUnsupportedRegions:
    Fn::Or:
    - Fn::Equals:
      - Ref: AWS::Region
      - cn-north-1
    - Fn::Equals:
      - Ref: AWS::Region
      - cn-northwest-1
  CDKMetadataAvailable:
    Fn::Or:
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - af-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ca-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - cn-north-1
      - Fn::Equals:
        - Ref: AWS::Region
        - cn-northwest-1
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-north-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-2
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-3
      - Fn::Equals:
        - Ref: AWS::Region
        - me-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - sa-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-east-2
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - us-west-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-west-2
Mappings:
  awscdkawskinesisfirehoseCidrBlocks:
    af-south-1:
      FirehoseCidrBlock: 13.244.121.224/27
    ap-east-1:
      FirehoseCidrBlock: 18.162.221.32/27
    ap-northeast-1:
      FirehoseCidrBlock: 13.113.196.224/27
    ap-northeast-2:
      FirehoseCidrBlock: 13.209.1.64/27
    ap-northeast-3:
      FirehoseCidrBlock: 13.208.177.192/27
    ap-south-1:
      FirehoseCidrBlock: 13.232.67.32/27
    ap-south-2:
      FirehoseCidrBlock: 18.60.192.128/27
    ap-southeast-1:
      FirehoseCidrBlock: 13.228.64.192/27
    ap-southeast-2:
      FirehoseCidrBlock: 13.210.67.224/27
    ap-southeast-3:
      FirehoseCidrBlock: 108.136.221.64/27
    ap-southeast-4:
      FirehoseCidrBlock: 16.50.161.128/27
    ca-central-1:
      FirehoseCidrBlock: 35.183.92.128/27
    cn-north-1:
      FirehoseCidrBlock: 52.81.151.32/27
    cn-northwest-1:
      FirehoseCidrBlock: 161.189.23.64/27
    eu-central-1:
      FirehoseCidrBlock: 35.158.127.160/27
    eu-central-2:
      FirehoseCidrBlock: 16.62.183.32/27
    eu-north-1:
      FirehoseCidrBlock: 13.53.63.224/27
    eu-south-1:
      FirehoseCidrBlock: 15.161.135.128/27
    eu-south-2:
      FirehoseCidrBlock: 18.100.71.96/27
    eu-west-1:
      FirehoseCidrBlock: 52.19.239.192/27
    eu-west-2:
      FirehoseCidrBlock: 18.130.1.96/27
    eu-west-3:
      FirehoseCidrBlock: 35.180.1.96/27
    il-central-1:
      FirehoseCidrBlock: 51.16.102.0/27
    me-central-1:
      FirehoseCidrBlock: 3.28.159.32/27
    me-south-1:
      FirehoseCidrBlock: 15.185.91.0/27
    sa-east-1:
      FirehoseCidrBlock: 18.228.1.128/27
    us-east-1:
      FirehoseCidrBlock: 52.70.63.192/27
    us-east-2:
      FirehoseCidrBlock: 13.58.135.96/27
    us-gov-east-1:
      FirehoseCidrBlock: 18.253.138.96/27
    us-gov-west-1:
      FirehoseCidrBlock: 52.61.204.160/27
    us-west-1:
      FirehoseCidrBlock: 13.57.135.192/27
    us-west-2:
      FirehoseCidrBlock: 52.89.255.224/27
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically
      retrieved from SSM Parameter Store. [cdk:skip]
Outputs:
  BastionIPaddress:
    Value:
      Fn::GetAtt:
      - BastionEc2Instance2754A287
      - PublicIp
Rules:
  CheckBootstrapVersion:
    Assertions:
    - Assert:
        Fn::Not:
        - Fn::Contains:
          - - '1'
            - '2'
            - '3'
            - '4'
            - '5'
          - Ref: BootstrapVersion
      AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap'
        with a recent version of the CDK CLI.
